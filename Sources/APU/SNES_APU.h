#ifndef SNES_APU_H
#define SNES_APU_H

#include "Common.h"
#include "MemoryInterface.h"

class Bus;
class SPC700;

class SNES_APU : MemoryInterface
{
public:
	SNES_APU(SPC700 &spc);
	void tick();
	void attachBus(Bus * bus);
	virtual void memoryMap(MemoryOperation op, uint32_t full_adr, uint8_t *data);
	void mainBusIO(MemoryOperation op, uint32_t full_adr, uint8_t *data);
	uint8_t read(uint16_t adr);
	void write(uint16_t adr, uint8_t data);

	const int SPC_CLOCK = 13;
private:
	Bus * bus;
	SPC700 &spc;

	uint8_t ram[BANK_SIZE];
	uint8_t bootROM[64] = {
		0xCD,0xEF,0xBD,0xE8,0x00,0xC6,0x1D,0xD0,0xFC,0x8F,0xAA,0xF4,0x8F,0xBB,0xF5,0x78,
		0xCC,0xF4,0xD0,0xFB,0x2F,0x19,0xEB,0xF4,0xD0,0xFC,0x7E,0xF4,0xD0,0x0B,0xE4,0xF5,
		0xCB,0xF4,0xD7,0x00,0xFC,0xD0,0xF3,0xAB,0x01,0x10,0xEF,0x7E,0xF4,0x10,0xEB,0xBA,
		0xF6,0xDA,0x00,0xBA,0xF4,0xC4,0xF4,0xDD,0x5D,0xD0,0xDB,0x1F,0x00,0x00,0xC0,0xFF
		};

	struct
	{
		uint8_t val = 0xB0;
		bool bootROMEnabled() {return (val>>7)&1;}
	} control;

	uint8_t ia[4]; //Inputs from the SPC700 POV
	uint8_t oa[4];

	int spc_clock = SPC_CLOCK; //test value (spc runs around 1MHz)
};

#endif // SNES_APU_H
